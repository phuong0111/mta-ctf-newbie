from Cryptodome.Util.number import bytes_to_long, long_to_bytes, getStrongPrime
from sympy import isprime

e = 65537
_n = 488594150018356104743360471780205403545441209060256729137164038537676599362878190981920516554421590258238515618449750985891175030926717331209498982161611981924927571937232980671860995692342844980196870803553484460965923405826239739612544997270974984272106618470669107922303287837996978131051615925495644837
_q = 80010678722841069804372512802456615676374598635439671916170512885067569296605399657233599421856535796385681607868510909937338841790332071846857268291
enc = 0x260772A51CABF4DB2AD87F563EBC1A7F1329D28900F1C2350F36B586B4D50E85EBDE64E5F547D9FE28FA90B1D1C1108E80452639D7D3560B2F161EA82625C8CEF3D8C2E881E1B010ECE2CE0C8F574180B2CC75D193C3006A95B1360D998EFA62E2B8F1496E61E44FC7B45F518EE1B8C237D46A151283B0AA704888F9A80AD376


q_candidates = []
for _ in range(2**15, 2**16):
    tmp = (_ << (512 - 16)) + _q
    if isprime(tmp):
        q_candidates.append(tmp)

nq_canidates = []
for _ in range(2**8):
    n = (_n << 8) + _
    for q in q_candidates:
        if n % q == 0 and isprime(n // q):
            nq_canidates.append((n, n // q, q))

for n, p, q in nq_canidates:
    phi = (p - 1) * (q - 1)
    d = pow(e, -1, phi)
    print(n, p, q)
    try:
        flag = (long_to_bytes(pow(enc, d, n))).decode()
        print(flag)
    except Exception:
        pass
